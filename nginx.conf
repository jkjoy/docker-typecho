user  nginx;
worker_processes  auto;
error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  4096;  # 增加每个 worker 进程的最大连接数
    use epoll;  # 使用 epoll 事件模型（适用于 Linux 系统）
    multi_accept on;  # 允许 worker 进程一次接受多个新连接
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    tcp_nopush      on;  # 开启 TCP 优化，减少网络包数量
    tcp_nodelay     on;  # 开启 TCP 优化，提高小数据包的传输效率

    keepalive_timeout  65;  # 增加 keep-alive 超时时间，减少频繁的连接建立
    client_max_body_size 10m;

    gzip  on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;  # 指定压缩的 MIME 类型
    gzip_comp_level 5;  # 设置压缩级别，平衡压缩率和 CPU 使用率
    gzip_min_length 1024;  # 只压缩大于 1KB 的响应

    include /etc/nginx/sites-enabled/*;

    # 安全优化
    server_tokens off;  # 隐藏 Nginx 版本号
    add_header X-Frame-Options SAMEORIGIN;  # 防止点击劫持
    add_header X-Content-Type-Options nosniff;  # 防止 MIME 类型嗅探
    add_header X-XSS-Protection "1; mode=block";  # 开启 XSS 保护

    # 性能优化
    open_file_cache max=1000 inactive=20s;  # 缓存打开的文件描述符
    open_file_cache_valid 30s;  # 缓存验证时间
    open_file_cache_min_uses 2;  # 缓存最小使用次数
    open_file_cache_errors on;  # 缓存文件查找错误
}
